# üê≥ Î°úÏª¨ Í∞úÎ∞úÏö© Docker Compose ÏÑ§Ï†ï
# Docker Hub rate limit Ïö∞ÌöåÎ•º ÏúÑÌïú Î°úÏª¨ ÎπåÎìú ÏÑ§Ï†ï

version: '3.8'

services:
  # Î©îÏù∏ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò (Î°úÏª¨ ÎπåÎìú)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: github-actions-demo-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - LOG_LEVEL=debug
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=github_actions_demo
      - DB_USER=postgres
      - DB_PASSWORD=password123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§
  postgres:
    image: postgres:15-alpine
    container_name: github-actions-demo-postgres
    environment:
      - POSTGRES_DB=github_actions_demo
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d github_actions_demo"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Ï∫êÏãú
  redis:
    image: redis:7-alpine
    container_name: github-actions-demo-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
